var p=Object.defineProperty;var a=(t,o)=>p(t,"name",{value:o,configurable:!0});import"./index-39d17dc8.js";import{c as e,A as l,M as d}from"./Props-675af4db.js";import"./jsx-runtime-310bfdac.js";import"./es.object.get-own-property-descriptor-037fa860.js";import"./web.url.constructor-e43b1f1b.js";import"./iframe-9182d7c2.js";import"./es.number.is-integer-5e366acf.js";import"./index-681e4b07-3a6caed7.js";import"./es.map.constructor-7191d149.js";import"./es.number.to-fixed-3c0460d7.js";import"./index-66301289.js";import"./es.number.is-nan-184059e4.js";import"./string-d2fe5096.js";const c="/design-system-test/assets/vite-react-80449f15.png",u="/design-system-test/assets/app-daf86cf9.png",g="/design-system-test/assets/main-529e7695.png",f="/design-system-test/assets/example-464d8e63.png",y="/design-system-test/assets/pageExample-edbccd8e.png";function i(){return i=Object.assign?Object.assign.bind():function(t){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i.apply(this,arguments)}a(i,"_extends");const h={},x="wrapper";function m({components:t,...o}){return e(x,i({},h,o,{components:t,mdxType:"MDXLayout"}),e(d,{title:"Home",mdxType:"Meta"}),e("h1",null,"Design System SF"),e("hr",null),e("h2",null,"Utilização dos componentes"),e("hr",null),e("ul",null,e("li",{parentName:"ul"},`Os componentes devem ser utilizados em um projecto React, portanto deve-se primeiro iniciar um novo projecto (caso não haja um projecto já criado).
Existem diversas maneiras de fazermos isto. A mais indicada atualmente é através do Vite, com o comando:
`,e("strong",{parentName:"li"},"npm create vite@latest"),`. A seguir seguimos o prompt: nomear o projecto, escolher a framework (React) e definirmos se será um projecto JavaScript
ou TypeScript (para uso dos componentes esta escolha é indiferente).`),e("li",{parentName:"ul"},"Com o projecto instalado, abrimos a pasta no VSCode e corremos dois comandos: ",e("strong",{parentName:"li"},"npm install")," e depois ",e("strong",{parentName:"li"},"npm run dev"),"."),e("li",{parentName:"ul"},"Se tudo estiver corrido como esperado, podemos abrir o browser na porta indicada e veremos a página default da aplicação:")),e("hr",null),e("h2",null,e("img",{src:c})),e("ul",null,e("li",{parentName:"ul"},`Agora, podemos apagar tudo o que não formos utilizar na pasta src: ficheiros de estilo (se for o caso) e assets. O importante é deixarmos os ficheiros App.tsx,
main.tsx. No ficheiro App.tsx podemos apagar também todos elementos da página default e no main.tsx as importações que não formos utilizar. No fim os ficheiros estarão assim:`)),e("hr",null),e("h2",null,e("img",{src:u})),e("h2",null,e("img",{src:g})),e("ul",null,e("li",{parentName:"ul"},"Agora para utilizarmos nosso primeiro componente do Design System, devemos instalar duas dependências na raiz do projecto: ",e("strong",{parentName:"li"},"npm i @design-system-test-sf/tokens")," e ",e("strong",{parentName:"li"},"npm i @design-system-test-sf/react")),e("li",{parentName:"ul"},`Com as dependências instaladas, podemos importar o componente que quisermos dentro da aplicação. Para efeitos de exemplo, importei o componente Button e a cor verde que definimos nos nossos tokens,
dentro do próprio App.tsx e os utilizei desta maneira:`)),e("hr",null),e("h2",null,e("img",{src:f})),e("ul",null,e("li",{parentName:"ul"},"Podemos ver o Button na versão 'default' do Design System, e o Button na versão 'secondary'. Além do texto com a cor verde que definimos nos tokens:")),e("hr",null),e("h2",null,e("img",{src:y})))}a(m,"MDXContent");m.isMDXComponent=!0;const v=a(()=>{throw new Error("Docs-only story")},"__page");v.parameters={docsOnly:!0};const s={title:"Home",includeStories:["__page"]},N={};s.parameters=s.parameters||{};s.parameters.docs={...s.parameters.docs||{},page:()=>e(l,{mdxStoryNameToKey:N,mdxComponentAnnotations:s},e(m,null))};const P=["__page"];export{P as __namedExportsOrder,v as __page,s as default};
//# sourceMappingURL=home.stories-2020837e.js.map
